{"ast":null,"code":"var _jsxFileName = \"/Users/vilhelmgroenbaek/DevProjects/webAppForCV/frontend/src/CombinedHistogram.tsx\",\n  _s = $RefreshSig$();\nimport { useState, useMemo } from \"react\";\nimport HistogramSingle from \"./HistogramSingle.tsx\";\nimport HistogramGroup from \"./HistogramGroup.tsx\";\nimport React from \"react\";\n\n// Assume these two datasets are coming from your backend response\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const CombinedHistogram = ({\n  width,\n  height,\n  unhedged,\n  option\n}) => {\n  _s();\n  const [mode, setMode] = useState(\"both\");\n\n  // Calculate shared domain for consistent scaling\n  const domain = useMemo(() => {\n    const allValues = [...unhedged, ...option];\n    const min = Math.min(...allValues);\n    const max = Math.max(...allValues);\n    return [min, max];\n  }, [unhedged, option]);\n  const renderHistogram = () => {\n    const sharedProps = {\n      width,\n      height,\n      domain\n    };\n    if (mode === \"both\") {\n      const groups = [{\n        name: \"Unhedged\",\n        values: unhedged,\n        id: \"unhedged\"\n      }, {\n        name: \"Option\",\n        values: option,\n        id: \"option\"\n      }];\n      return /*#__PURE__*/_jsxDEV(HistogramGroup, {\n        ...sharedProps,\n        data: groups\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 14\n      }, this);\n    } else if (mode === \"unhedged\") {\n      return /*#__PURE__*/_jsxDEV(HistogramSingle, {\n        ...sharedProps,\n        data: unhedged,\n        groupId: \"unhedged\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 14\n      }, this);\n    } else if (mode === \"option\") {\n      return /*#__PURE__*/_jsxDEV(HistogramSingle, {\n        ...sharedProps,\n        data: option,\n        groupId: \"option\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 14\n      }, this);\n    }\n  };\n  const buttonStyle = {\n    border: \"1px solid #9a6fb0\",\n    borderRadius: \"3px\",\n    padding: \"0px 8px\",\n    margin: \"10px 2px\",\n    fontSize: 14,\n    color: \"#9a6fb0\",\n    opacity: 0.7\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: \"10px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        style: buttonStyle,\n        onClick: () => setMode(\"unhedged\"),\n        children: \"Unhedged Revenue\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        style: buttonStyle,\n        onClick: () => setMode(\"option\"),\n        children: \"Option Revenue\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        style: buttonStyle,\n        onClick: () => setMode(\"both\"),\n        children: \"Both\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'relative',\n        width,\n        height\n      },\n      children: renderHistogram()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n};\n_s(CombinedHistogram, \"YsgsbIVS6G3sgTksGBBrk2OgmUc=\");\n_c = CombinedHistogram;\nexport default CombinedHistogram;\nvar _c;\n$RefreshReg$(_c, \"CombinedHistogram\");","map":{"version":3,"names":["useState","useMemo","HistogramSingle","HistogramGroup","React","jsxDEV","_jsxDEV","CombinedHistogram","width","height","unhedged","option","_s","mode","setMode","domain","allValues","min","Math","max","renderHistogram","sharedProps","groups","name","values","id","data","fileName","_jsxFileName","lineNumber","columnNumber","groupId","buttonStyle","border","borderRadius","padding","margin","fontSize","color","opacity","children","style","marginBottom","onClick","position","_c","$RefreshReg$"],"sources":["/Users/vilhelmgroenbaek/DevProjects/webAppForCV/frontend/src/CombinedHistogram.tsx"],"sourcesContent":["import { useState, useMemo } from \"react\";\nimport HistogramSingle from \"./HistogramSingle.tsx\";\nimport HistogramGroup from \"./HistogramGroup.tsx\";\nimport React from \"react\";\n\n\n// Assume these two datasets are coming from your backend response\ntype CombinedHistogramProps = {\n  width: number;\n  height: number;\n  unhedged: number[];\n  option: number[];\n};\nexport const CombinedHistogram = ({ width, height, unhedged, option }: CombinedHistogramProps) => {\n\n  const [mode, setMode] = useState<\"unhedged\" | \"option\" | \"both\">(\"both\");\n\n  // Calculate shared domain for consistent scaling\n  const domain = useMemo(() => {\n    const allValues = [...unhedged, ...option];\n    const min = Math.min(...allValues);\n    const max = Math.max(...allValues);\n    return [min, max] as [number, number];\n  }, [unhedged, option]);\n\n  const renderHistogram = () => {\n    const sharedProps = {\n      width,\n      height,\n      domain\n    };\n\n    if (mode === \"both\") {\n      const groups = [\n        { name: \"Unhedged\", values: unhedged, id: \"unhedged\" },\n        { name: \"Option\", values: option, id: \"option\" },\n      ];\n      return <HistogramGroup {...sharedProps} data={groups} />;\n    } else if (mode === \"unhedged\") {\n      return <HistogramSingle {...sharedProps} data={unhedged} groupId=\"unhedged\" />;\n    } else if (mode === \"option\") {\n      return <HistogramSingle {...sharedProps} data={option} groupId=\"option\" />;\n    }\n  };\n  const buttonStyle = {\n    border: \"1px solid #9a6fb0\",\n    borderRadius: \"3px\",\n    padding: \"0px 8px\",\n    margin: \"10px 2px\",\n    fontSize: 14,\n    color: \"#9a6fb0\",\n    opacity: 0.7,\n  };\n\n  return (\n    <div>\n      <div style={{ marginBottom: \"10px\" }}>\n        <button style={buttonStyle} onClick={() => setMode(\"unhedged\")}>\n          Unhedged Revenue\n        </button>\n        <button style={buttonStyle} onClick={() => setMode(\"option\")}>\n          Option Revenue\n        </button>\n        <button style={buttonStyle} onClick={() => setMode(\"both\")}>\n          Both\n        </button>\n      </div>\n      <div style={{ position: 'relative', width, height }}>\n        {renderHistogram()}\n      </div>\n    </div>\n  );\n};\n\nexport default CombinedHistogram;\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}