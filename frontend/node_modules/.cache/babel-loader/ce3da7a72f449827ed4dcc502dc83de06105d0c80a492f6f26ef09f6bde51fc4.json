{"ast":null,"code":"import{useState}from\"react\";import HistogramSingle from\"./HistogramSingle.tsx\";import HistogramGroup from\"./HistogramGroup.tsx\";import React from\"react\";// Assume these two datasets are coming from your backend response\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";export const CombinedHistogram=_ref=>{let{width,height,unhedged,option}=_ref;// mode can be \"unhedged\", \"option\", or \"both\"\nconst[mode,setMode]=useState(\"both\");const renderHistogram=()=>{if(mode===\"both\"){// Build groups array from the two datasets.\nconst groups=[{name:\"Unhedged\",values:unhedged},{name:\"Option\",values:option}];return/*#__PURE__*/_jsx(HistogramGroup,{width:width,height:height,data:groups});}else if(mode===\"unhedged\"){return/*#__PURE__*/_jsx(HistogramSingle,{width:width,height:height,data:unhedged});}else if(mode===\"option\"){return/*#__PURE__*/_jsx(HistogramSingle,{width:width,height:height,data:option});}};const buttonStyle={border:\"1px solid #9a6fb0\",borderRadius:\"3px\",padding:\"0px 8px\",margin:\"10px 2px\",fontSize:14,color:\"#9a6fb0\",opacity:0.7};return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsxs(\"div\",{style:{marginBottom:\"10px\"},children:[/*#__PURE__*/_jsx(\"button\",{style:buttonStyle,onClick:()=>setMode(\"unhedged\"),children:\"Unhedged Revenue\"}),/*#__PURE__*/_jsx(\"button\",{style:buttonStyle,onClick:()=>setMode(\"option\"),children:\"Option Revenue\"}),/*#__PURE__*/_jsx(\"button\",{style:buttonStyle,onClick:()=>setMode(\"both\"),children:\"Both\"})]}),renderHistogram()]});};export default CombinedHistogram;","map":{"version":3,"names":["useState","HistogramSingle","HistogramGroup","React","jsx","_jsx","jsxs","_jsxs","CombinedHistogram","_ref","width","height","unhedged","option","mode","setMode","renderHistogram","groups","name","values","data","buttonStyle","border","borderRadius","padding","margin","fontSize","color","opacity","children","style","marginBottom","onClick"],"sources":["/Users/vilhelmgroenbaek/DevProjects/webAppForCV/frontend/src/CombinedHistogram.tsx"],"sourcesContent":["\nimport { useState } from \"react\";\nimport HistogramSingle from \"./HistogramSingle.tsx\";\nimport HistogramGroup from \"./HistogramGroup.tsx\";\nimport React from \"react\";\n\n\n// Assume these two datasets are coming from your backend response\ntype CombinedHistogramProps = {\n  width: number;\n  height: number;\n  unhedged: number[];\n  option: number[];\n};\n\nexport const CombinedHistogram = ({\n  width,\n  height,\n  unhedged,\n  option,\n}: CombinedHistogramProps) => {\n  // mode can be \"unhedged\", \"option\", or \"both\"\n  const [mode, setMode] = useState<\"unhedged\" | \"option\" | \"both\">(\"both\");\n\n  const renderHistogram = () => {\n    if (mode === \"both\") {\n      // Build groups array from the two datasets.\n      const groups = [\n        { name: \"Unhedged\", values: unhedged },\n        { name: \"Option\", values: option },\n      ];\n      return <HistogramGroup width={width} height={height} data={groups} />;\n    } else if (mode === \"unhedged\") {\n      return <HistogramSingle width={width} height={height} data={unhedged} />;\n    } else if (mode === \"option\") {\n      return <HistogramSingle width={width} height={height} data={option} />;\n    }\n  };\n\n  const buttonStyle = {\n    border: \"1px solid #9a6fb0\",\n    borderRadius: \"3px\",\n    padding: \"0px 8px\",\n    margin: \"10px 2px\",\n    fontSize: 14,\n    color: \"#9a6fb0\",\n    opacity: 0.7,\n  };\n\n  return (\n    <div>\n      <div style={{ marginBottom: \"10px\" }}>\n        <button style={buttonStyle} onClick={() => setMode(\"unhedged\")}>\n          Unhedged Revenue\n        </button>\n        <button style={buttonStyle} onClick={() => setMode(\"option\")}>\n          Option Revenue\n        </button>\n        <button style={buttonStyle} onClick={() => setMode(\"both\")}>\n          Both\n        </button>\n      </div>\n      {renderHistogram()}\n    </div>\n  );\n};\n\nexport default CombinedHistogram;\n\n"],"mappings":"AACA,OAASA,QAAQ,KAAQ,OAAO,CAChC,MAAO,CAAAC,eAAe,KAAM,uBAAuB,CACnD,MAAO,CAAAC,cAAc,KAAM,sBAAsB,CACjD,MAAO,CAAAC,KAAK,KAAM,OAAO,CAGzB;AAAA,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAQA,MAAO,MAAM,CAAAC,iBAAiB,CAAGC,IAAA,EAKH,IALI,CAChCC,KAAK,CACLC,MAAM,CACNC,QAAQ,CACRC,MACsB,CAAC,CAAAJ,IAAA,CACvB;AACA,KAAM,CAACK,IAAI,CAAEC,OAAO,CAAC,CAAGf,QAAQ,CAAiC,MAAM,CAAC,CAExE,KAAM,CAAAgB,eAAe,CAAGA,CAAA,GAAM,CAC5B,GAAIF,IAAI,GAAK,MAAM,CAAE,CACnB;AACA,KAAM,CAAAG,MAAM,CAAG,CACb,CAAEC,IAAI,CAAE,UAAU,CAAEC,MAAM,CAAEP,QAAS,CAAC,CACtC,CAAEM,IAAI,CAAE,QAAQ,CAAEC,MAAM,CAAEN,MAAO,CAAC,CACnC,CACD,mBAAOR,IAAA,CAACH,cAAc,EAACQ,KAAK,CAAEA,KAAM,CAACC,MAAM,CAAEA,MAAO,CAACS,IAAI,CAAEH,MAAO,CAAE,CAAC,CACvE,CAAC,IAAM,IAAIH,IAAI,GAAK,UAAU,CAAE,CAC9B,mBAAOT,IAAA,CAACJ,eAAe,EAACS,KAAK,CAAEA,KAAM,CAACC,MAAM,CAAEA,MAAO,CAACS,IAAI,CAAER,QAAS,CAAE,CAAC,CAC1E,CAAC,IAAM,IAAIE,IAAI,GAAK,QAAQ,CAAE,CAC5B,mBAAOT,IAAA,CAACJ,eAAe,EAACS,KAAK,CAAEA,KAAM,CAACC,MAAM,CAAEA,MAAO,CAACS,IAAI,CAAEP,MAAO,CAAE,CAAC,CACxE,CACF,CAAC,CAED,KAAM,CAAAQ,WAAW,CAAG,CAClBC,MAAM,CAAE,mBAAmB,CAC3BC,YAAY,CAAE,KAAK,CACnBC,OAAO,CAAE,SAAS,CAClBC,MAAM,CAAE,UAAU,CAClBC,QAAQ,CAAE,EAAE,CACZC,KAAK,CAAE,SAAS,CAChBC,OAAO,CAAE,GACX,CAAC,CAED,mBACErB,KAAA,QAAAsB,QAAA,eACEtB,KAAA,QAAKuB,KAAK,CAAE,CAAEC,YAAY,CAAE,MAAO,CAAE,CAAAF,QAAA,eACnCxB,IAAA,WAAQyB,KAAK,CAAET,WAAY,CAACW,OAAO,CAAEA,CAAA,GAAMjB,OAAO,CAAC,UAAU,CAAE,CAAAc,QAAA,CAAC,kBAEhE,CAAQ,CAAC,cACTxB,IAAA,WAAQyB,KAAK,CAAET,WAAY,CAACW,OAAO,CAAEA,CAAA,GAAMjB,OAAO,CAAC,QAAQ,CAAE,CAAAc,QAAA,CAAC,gBAE9D,CAAQ,CAAC,cACTxB,IAAA,WAAQyB,KAAK,CAAET,WAAY,CAACW,OAAO,CAAEA,CAAA,GAAMjB,OAAO,CAAC,MAAM,CAAE,CAAAc,QAAA,CAAC,MAE5D,CAAQ,CAAC,EACN,CAAC,CACLb,eAAe,CAAC,CAAC,EACf,CAAC,CAEV,CAAC,CAED,cAAe,CAAAR,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}